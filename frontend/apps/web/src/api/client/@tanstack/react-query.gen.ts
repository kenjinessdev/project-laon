// This file is auto-generated by @hey-api/openapi-ts

import { type Options, Default } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { FacebookLoginApiV1AuthFacebookGetData, FacebookCallbackApiV1AuthFacebookCallbackGetData, GoogleLoginApiV1AuthGoogleGetData, GoogleCallbackApiV1AuthGoogleCallbackGetData, RegisterApiV1AuthRegisterPostData, RegisterApiV1AuthRegisterPostError, RegisterApiV1AuthRegisterPostResponse, LoginApiV1AuthLoginPostData, LoginApiV1AuthLoginPostError, LoginApiV1AuthLoginPostResponse, RefreshTokenApiV1AuthRefreshPostData, RefreshTokenApiV1AuthRefreshPostError, RefreshTokenApiV1AuthRefreshPostResponse, MyProductsApiV1FarmerProductsGetData, DeleteProductApiV1FarmerProductProductIdDeleteData, DeleteProductApiV1FarmerProductProductIdDeleteError, ViewProductApiV1FarmerProductProductIdGetData, UpdateProductApiV1FarmerProductProductIdPatchData, UpdateProductApiV1FarmerProductProductIdPatchError, UpdateProductApiV1FarmerProductProductIdPatchResponse, CreateProductApiV1FarmerProductPostData, CreateProductApiV1FarmerProductPostError, CreateProductApiV1FarmerProductPostResponse, UploadProductImageApiV1FarmerProductProductIdImagesPostData, UploadProductImageApiV1FarmerProductProductIdImagesPostError, UploadProductImageApiV1FarmerProductProductIdImagesPostResponse, DeleteProductImageApiV1FarmerProductProductIdImagesImageIdDeleteData, DeleteProductImageApiV1FarmerProductProductIdImagesImageIdDeleteError, UpdateProductStatusApiV1FarmerProductProductIdStatusPatchData, UpdateProductStatusApiV1FarmerProductProductIdStatusPatchError, OrdersApiV1FarmerOrdersGetData, AcceptOrderApiV1FarmerOrdersOrderIdAcceptPostData, AcceptOrderApiV1FarmerOrdersOrderIdAcceptPostError, UpdateProductStatusApiV1FarmerOrdersOrderIdStatusPatchData, UpdateProductStatusApiV1FarmerOrdersOrderIdStatusPatchError, FarmerDashboardApiV1FarmerDashboardGetData, AddToCartApiV1CustomerAddToCartPostData, AddToCartApiV1CustomerAddToCartPostError, AddToCartApiV1CustomerAddToCartPostResponse, UpdateCartItemQuantityApiV1CustomerCartItemsItemIdQuantityPatchData, UpdateCartItemQuantityApiV1CustomerCartItemsItemIdQuantityPatchError, DeleteCartItemApiV1CustomerCartItemsItemIdDeleteDeleteData, DeleteCartItemApiV1CustomerCartItemsItemIdDeleteDeleteError, GetCartApiV1CustomerCartGetData, CheckoutApiV1CustomerCheckoutPostData, CheckoutApiV1CustomerCheckoutPostError, OrdersApiV1CustomerOrdersGetData, GetOrderApiV1CustomerOrdersOrderIdGetData, CancelOrderApiV1CustomerOrdersOrderIdCancelPostData, CancelOrderApiV1CustomerOrdersOrderIdCancelPostError, ConfirmOrderApiV1CustomerOrdersOrderIdPayPostData, ConfirmOrderApiV1CustomerOrdersOrderIdPayPostError, ReviewOrderApiV1CustomerOrdersOrderIdReviewPostData, ReviewOrderApiV1CustomerOrdersOrderIdReviewPostError, FarmerDashboardApiV1CustomerDashboardGetData, GetMeApiV1UsersMeGetData, UpdateProfileApiV1UsersMePatchData, UpdateProfileApiV1UsersMePatchError, UpdateProfileApiV1UsersMePatchResponse, ChangePasswordApiV1UsersMePasswordPatchData, ChangePasswordApiV1UsersMePasswordPatchError, CreateAddressApiV1UsersMeAddressPostData, CreateAddressApiV1UsersMeAddressPostError, CreateAddressApiV1UsersMeAddressPostResponse, DeleteAddressApiV1UsersMeAddressAddressIdDeleteData, DeleteAddressApiV1UsersMeAddressAddressIdDeleteError, UpdateAddressApiV1UsersMeAddressAddressIdPatchData, UpdateAddressApiV1UsersMeAddressAddressIdPatchError, UpdateAddressApiV1UsersMeAddressAddressIdPatchResponse, AddAvatarApiV1UsersMeAvatarPostData, AddAvatarApiV1UsersMeAvatarPostError, GetProductsApiV1ProductsGetData, SendNotificationApiV1SendNotificationPostData, SendNotificationApiV1SendNotificationPostError, V1ApiV1GetData, ReadRootGetData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const facebookLoginApiV1AuthFacebookGetQueryKey = (options?: Options<FacebookLoginApiV1AuthFacebookGetData>) => createQueryKey('facebookLoginApiV1AuthFacebookGet', options);

/**
 * Start Facebook OAuth2 flow
 * Redirects the user to Facebook for authentication.
 */
export const facebookLoginApiV1AuthFacebookGetOptions = (options?: Options<FacebookLoginApiV1AuthFacebookGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.facebookLoginApiV1AuthFacebookGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: facebookLoginApiV1AuthFacebookGetQueryKey(options)
    });
};

export const facebookCallbackApiV1AuthFacebookCallbackGetQueryKey = (options?: Options<FacebookCallbackApiV1AuthFacebookCallbackGetData>) => createQueryKey('facebookCallbackApiV1AuthFacebookCallbackGet', options);

/**
 * Facebook Callback
 */
export const facebookCallbackApiV1AuthFacebookCallbackGetOptions = (options?: Options<FacebookCallbackApiV1AuthFacebookCallbackGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.facebookCallbackApiV1AuthFacebookCallbackGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: facebookCallbackApiV1AuthFacebookCallbackGetQueryKey(options)
    });
};

export const googleLoginApiV1AuthGoogleGetQueryKey = (options?: Options<GoogleLoginApiV1AuthGoogleGetData>) => createQueryKey('googleLoginApiV1AuthGoogleGet', options);

/**
 * Google Login
 */
export const googleLoginApiV1AuthGoogleGetOptions = (options?: Options<GoogleLoginApiV1AuthGoogleGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.googleLoginApiV1AuthGoogleGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: googleLoginApiV1AuthGoogleGetQueryKey(options)
    });
};

export const googleCallbackApiV1AuthGoogleCallbackGetQueryKey = (options?: Options<GoogleCallbackApiV1AuthGoogleCallbackGetData>) => createQueryKey('googleCallbackApiV1AuthGoogleCallbackGet', options);

/**
 * Google Callback
 */
export const googleCallbackApiV1AuthGoogleCallbackGetOptions = (options?: Options<GoogleCallbackApiV1AuthGoogleCallbackGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.googleCallbackApiV1AuthGoogleCallbackGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: googleCallbackApiV1AuthGoogleCallbackGetQueryKey(options)
    });
};

export const registerApiV1AuthRegisterPostQueryKey = (options: Options<RegisterApiV1AuthRegisterPostData>) => createQueryKey('registerApiV1AuthRegisterPost', options);

/**
 * Register
 */
export const registerApiV1AuthRegisterPostOptions = (options: Options<RegisterApiV1AuthRegisterPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.registerApiV1AuthRegisterPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: registerApiV1AuthRegisterPostQueryKey(options)
    });
};

/**
 * Register
 */
export const registerApiV1AuthRegisterPostMutation = (options?: Partial<Options<RegisterApiV1AuthRegisterPostData>>): UseMutationOptions<RegisterApiV1AuthRegisterPostResponse, AxiosError<RegisterApiV1AuthRegisterPostError>, Options<RegisterApiV1AuthRegisterPostData>> => {
    const mutationOptions: UseMutationOptions<RegisterApiV1AuthRegisterPostResponse, AxiosError<RegisterApiV1AuthRegisterPostError>, Options<RegisterApiV1AuthRegisterPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.registerApiV1AuthRegisterPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginApiV1AuthLoginPostQueryKey = (options: Options<LoginApiV1AuthLoginPostData>) => createQueryKey('loginApiV1AuthLoginPost', options);

/**
 * Login
 */
export const loginApiV1AuthLoginPostOptions = (options: Options<LoginApiV1AuthLoginPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.loginApiV1AuthLoginPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginApiV1AuthLoginPostQueryKey(options)
    });
};

/**
 * Login
 */
export const loginApiV1AuthLoginPostMutation = (options?: Partial<Options<LoginApiV1AuthLoginPostData>>): UseMutationOptions<LoginApiV1AuthLoginPostResponse, AxiosError<LoginApiV1AuthLoginPostError>, Options<LoginApiV1AuthLoginPostData>> => {
    const mutationOptions: UseMutationOptions<LoginApiV1AuthLoginPostResponse, AxiosError<LoginApiV1AuthLoginPostError>, Options<LoginApiV1AuthLoginPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.loginApiV1AuthLoginPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const refreshTokenApiV1AuthRefreshPostQueryKey = (options?: Options<RefreshTokenApiV1AuthRefreshPostData>) => createQueryKey('refreshTokenApiV1AuthRefreshPost', options);

/**
 * Refresh Token
 */
export const refreshTokenApiV1AuthRefreshPostOptions = (options?: Options<RefreshTokenApiV1AuthRefreshPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.refreshTokenApiV1AuthRefreshPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: refreshTokenApiV1AuthRefreshPostQueryKey(options)
    });
};

/**
 * Refresh Token
 */
export const refreshTokenApiV1AuthRefreshPostMutation = (options?: Partial<Options<RefreshTokenApiV1AuthRefreshPostData>>): UseMutationOptions<RefreshTokenApiV1AuthRefreshPostResponse, AxiosError<RefreshTokenApiV1AuthRefreshPostError>, Options<RefreshTokenApiV1AuthRefreshPostData>> => {
    const mutationOptions: UseMutationOptions<RefreshTokenApiV1AuthRefreshPostResponse, AxiosError<RefreshTokenApiV1AuthRefreshPostError>, Options<RefreshTokenApiV1AuthRefreshPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.refreshTokenApiV1AuthRefreshPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const myProductsApiV1FarmerProductsGetQueryKey = (options?: Options<MyProductsApiV1FarmerProductsGetData>) => createQueryKey('myProductsApiV1FarmerProductsGet', options);

/**
 * My Products
 */
export const myProductsApiV1FarmerProductsGetOptions = (options?: Options<MyProductsApiV1FarmerProductsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.myProductsApiV1FarmerProductsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: myProductsApiV1FarmerProductsGetQueryKey(options)
    });
};

/**
 * Delete Product
 */
export const deleteProductApiV1FarmerProductProductIdDeleteMutation = (options?: Partial<Options<DeleteProductApiV1FarmerProductProductIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteProductApiV1FarmerProductProductIdDeleteError>, Options<DeleteProductApiV1FarmerProductProductIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteProductApiV1FarmerProductProductIdDeleteError>, Options<DeleteProductApiV1FarmerProductProductIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.deleteProductApiV1FarmerProductProductIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const viewProductApiV1FarmerProductProductIdGetQueryKey = (options: Options<ViewProductApiV1FarmerProductProductIdGetData>) => createQueryKey('viewProductApiV1FarmerProductProductIdGet', options);

/**
 * View Product
 */
export const viewProductApiV1FarmerProductProductIdGetOptions = (options: Options<ViewProductApiV1FarmerProductProductIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.viewProductApiV1FarmerProductProductIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: viewProductApiV1FarmerProductProductIdGetQueryKey(options)
    });
};

/**
 * Update Product
 */
export const updateProductApiV1FarmerProductProductIdPatchMutation = (options?: Partial<Options<UpdateProductApiV1FarmerProductProductIdPatchData>>): UseMutationOptions<UpdateProductApiV1FarmerProductProductIdPatchResponse, AxiosError<UpdateProductApiV1FarmerProductProductIdPatchError>, Options<UpdateProductApiV1FarmerProductProductIdPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateProductApiV1FarmerProductProductIdPatchResponse, AxiosError<UpdateProductApiV1FarmerProductProductIdPatchError>, Options<UpdateProductApiV1FarmerProductProductIdPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.updateProductApiV1FarmerProductProductIdPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createProductApiV1FarmerProductPostQueryKey = (options: Options<CreateProductApiV1FarmerProductPostData>) => createQueryKey('createProductApiV1FarmerProductPost', options);

/**
 * Create Product
 */
export const createProductApiV1FarmerProductPostOptions = (options: Options<CreateProductApiV1FarmerProductPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.createProductApiV1FarmerProductPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createProductApiV1FarmerProductPostQueryKey(options)
    });
};

/**
 * Create Product
 */
export const createProductApiV1FarmerProductPostMutation = (options?: Partial<Options<CreateProductApiV1FarmerProductPostData>>): UseMutationOptions<CreateProductApiV1FarmerProductPostResponse, AxiosError<CreateProductApiV1FarmerProductPostError>, Options<CreateProductApiV1FarmerProductPostData>> => {
    const mutationOptions: UseMutationOptions<CreateProductApiV1FarmerProductPostResponse, AxiosError<CreateProductApiV1FarmerProductPostError>, Options<CreateProductApiV1FarmerProductPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.createProductApiV1FarmerProductPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const uploadProductImageApiV1FarmerProductProductIdImagesPostQueryKey = (options: Options<UploadProductImageApiV1FarmerProductProductIdImagesPostData>) => createQueryKey('uploadProductImageApiV1FarmerProductProductIdImagesPost', options);

/**
 * Upload Product Image
 */
export const uploadProductImageApiV1FarmerProductProductIdImagesPostOptions = (options: Options<UploadProductImageApiV1FarmerProductProductIdImagesPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.uploadProductImageApiV1FarmerProductProductIdImagesPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: uploadProductImageApiV1FarmerProductProductIdImagesPostQueryKey(options)
    });
};

/**
 * Upload Product Image
 */
export const uploadProductImageApiV1FarmerProductProductIdImagesPostMutation = (options?: Partial<Options<UploadProductImageApiV1FarmerProductProductIdImagesPostData>>): UseMutationOptions<UploadProductImageApiV1FarmerProductProductIdImagesPostResponse, AxiosError<UploadProductImageApiV1FarmerProductProductIdImagesPostError>, Options<UploadProductImageApiV1FarmerProductProductIdImagesPostData>> => {
    const mutationOptions: UseMutationOptions<UploadProductImageApiV1FarmerProductProductIdImagesPostResponse, AxiosError<UploadProductImageApiV1FarmerProductProductIdImagesPostError>, Options<UploadProductImageApiV1FarmerProductProductIdImagesPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.uploadProductImageApiV1FarmerProductProductIdImagesPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Product Image
 */
export const deleteProductImageApiV1FarmerProductProductIdImagesImageIdDeleteMutation = (options?: Partial<Options<DeleteProductImageApiV1FarmerProductProductIdImagesImageIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteProductImageApiV1FarmerProductProductIdImagesImageIdDeleteError>, Options<DeleteProductImageApiV1FarmerProductProductIdImagesImageIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteProductImageApiV1FarmerProductProductIdImagesImageIdDeleteError>, Options<DeleteProductImageApiV1FarmerProductProductIdImagesImageIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.deleteProductImageApiV1FarmerProductProductIdImagesImageIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update Product Status
 */
export const updateProductStatusApiV1FarmerProductProductIdStatusPatchMutation = (options?: Partial<Options<UpdateProductStatusApiV1FarmerProductProductIdStatusPatchData>>): UseMutationOptions<unknown, AxiosError<UpdateProductStatusApiV1FarmerProductProductIdStatusPatchError>, Options<UpdateProductStatusApiV1FarmerProductProductIdStatusPatchData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<UpdateProductStatusApiV1FarmerProductProductIdStatusPatchError>, Options<UpdateProductStatusApiV1FarmerProductProductIdStatusPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.updateProductStatusApiV1FarmerProductProductIdStatusPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const ordersApiV1FarmerOrdersGetQueryKey = (options?: Options<OrdersApiV1FarmerOrdersGetData>) => createQueryKey('ordersApiV1FarmerOrdersGet', options);

/**
 * Orders
 */
export const ordersApiV1FarmerOrdersGetOptions = (options?: Options<OrdersApiV1FarmerOrdersGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.ordersApiV1FarmerOrdersGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: ordersApiV1FarmerOrdersGetQueryKey(options)
    });
};

export const acceptOrderApiV1FarmerOrdersOrderIdAcceptPostQueryKey = (options: Options<AcceptOrderApiV1FarmerOrdersOrderIdAcceptPostData>) => createQueryKey('acceptOrderApiV1FarmerOrdersOrderIdAcceptPost', options);

/**
 * Accept Order
 */
export const acceptOrderApiV1FarmerOrdersOrderIdAcceptPostOptions = (options: Options<AcceptOrderApiV1FarmerOrdersOrderIdAcceptPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.acceptOrderApiV1FarmerOrdersOrderIdAcceptPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: acceptOrderApiV1FarmerOrdersOrderIdAcceptPostQueryKey(options)
    });
};

/**
 * Accept Order
 */
export const acceptOrderApiV1FarmerOrdersOrderIdAcceptPostMutation = (options?: Partial<Options<AcceptOrderApiV1FarmerOrdersOrderIdAcceptPostData>>): UseMutationOptions<unknown, AxiosError<AcceptOrderApiV1FarmerOrdersOrderIdAcceptPostError>, Options<AcceptOrderApiV1FarmerOrdersOrderIdAcceptPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<AcceptOrderApiV1FarmerOrdersOrderIdAcceptPostError>, Options<AcceptOrderApiV1FarmerOrdersOrderIdAcceptPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.acceptOrderApiV1FarmerOrdersOrderIdAcceptPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update Product Status
 */
export const updateProductStatusApiV1FarmerOrdersOrderIdStatusPatchMutation = (options?: Partial<Options<UpdateProductStatusApiV1FarmerOrdersOrderIdStatusPatchData>>): UseMutationOptions<unknown, AxiosError<UpdateProductStatusApiV1FarmerOrdersOrderIdStatusPatchError>, Options<UpdateProductStatusApiV1FarmerOrdersOrderIdStatusPatchData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<UpdateProductStatusApiV1FarmerOrdersOrderIdStatusPatchError>, Options<UpdateProductStatusApiV1FarmerOrdersOrderIdStatusPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.updateProductStatusApiV1FarmerOrdersOrderIdStatusPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const farmerDashboardApiV1FarmerDashboardGetQueryKey = (options?: Options<FarmerDashboardApiV1FarmerDashboardGetData>) => createQueryKey('farmerDashboardApiV1FarmerDashboardGet', options);

/**
 * Farmer Dashboard
 */
export const farmerDashboardApiV1FarmerDashboardGetOptions = (options?: Options<FarmerDashboardApiV1FarmerDashboardGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.farmerDashboardApiV1FarmerDashboardGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: farmerDashboardApiV1FarmerDashboardGetQueryKey(options)
    });
};

export const addToCartApiV1CustomerAddToCartPostQueryKey = (options: Options<AddToCartApiV1CustomerAddToCartPostData>) => createQueryKey('addToCartApiV1CustomerAddToCartPost', options);

/**
 * Add To Cart
 */
export const addToCartApiV1CustomerAddToCartPostOptions = (options: Options<AddToCartApiV1CustomerAddToCartPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.addToCartApiV1CustomerAddToCartPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addToCartApiV1CustomerAddToCartPostQueryKey(options)
    });
};

/**
 * Add To Cart
 */
export const addToCartApiV1CustomerAddToCartPostMutation = (options?: Partial<Options<AddToCartApiV1CustomerAddToCartPostData>>): UseMutationOptions<AddToCartApiV1CustomerAddToCartPostResponse, AxiosError<AddToCartApiV1CustomerAddToCartPostError>, Options<AddToCartApiV1CustomerAddToCartPostData>> => {
    const mutationOptions: UseMutationOptions<AddToCartApiV1CustomerAddToCartPostResponse, AxiosError<AddToCartApiV1CustomerAddToCartPostError>, Options<AddToCartApiV1CustomerAddToCartPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.addToCartApiV1CustomerAddToCartPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update Cart Item Quantity
 */
export const updateCartItemQuantityApiV1CustomerCartItemsItemIdQuantityPatchMutation = (options?: Partial<Options<UpdateCartItemQuantityApiV1CustomerCartItemsItemIdQuantityPatchData>>): UseMutationOptions<unknown, AxiosError<UpdateCartItemQuantityApiV1CustomerCartItemsItemIdQuantityPatchError>, Options<UpdateCartItemQuantityApiV1CustomerCartItemsItemIdQuantityPatchData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<UpdateCartItemQuantityApiV1CustomerCartItemsItemIdQuantityPatchError>, Options<UpdateCartItemQuantityApiV1CustomerCartItemsItemIdQuantityPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.updateCartItemQuantityApiV1CustomerCartItemsItemIdQuantityPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Cart Item
 */
export const deleteCartItemApiV1CustomerCartItemsItemIdDeleteDeleteMutation = (options?: Partial<Options<DeleteCartItemApiV1CustomerCartItemsItemIdDeleteDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteCartItemApiV1CustomerCartItemsItemIdDeleteDeleteError>, Options<DeleteCartItemApiV1CustomerCartItemsItemIdDeleteDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteCartItemApiV1CustomerCartItemsItemIdDeleteDeleteError>, Options<DeleteCartItemApiV1CustomerCartItemsItemIdDeleteDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.deleteCartItemApiV1CustomerCartItemsItemIdDeleteDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getCartApiV1CustomerCartGetQueryKey = (options?: Options<GetCartApiV1CustomerCartGetData>) => createQueryKey('getCartApiV1CustomerCartGet', options);

/**
 * Get Cart
 */
export const getCartApiV1CustomerCartGetOptions = (options?: Options<GetCartApiV1CustomerCartGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.getCartApiV1CustomerCartGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCartApiV1CustomerCartGetQueryKey(options)
    });
};

export const checkoutApiV1CustomerCheckoutPostQueryKey = (options?: Options<CheckoutApiV1CustomerCheckoutPostData>) => createQueryKey('checkoutApiV1CustomerCheckoutPost', options);

/**
 * Checkout
 */
export const checkoutApiV1CustomerCheckoutPostOptions = (options?: Options<CheckoutApiV1CustomerCheckoutPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.checkoutApiV1CustomerCheckoutPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: checkoutApiV1CustomerCheckoutPostQueryKey(options)
    });
};

/**
 * Checkout
 */
export const checkoutApiV1CustomerCheckoutPostMutation = (options?: Partial<Options<CheckoutApiV1CustomerCheckoutPostData>>): UseMutationOptions<unknown, AxiosError<CheckoutApiV1CustomerCheckoutPostError>, Options<CheckoutApiV1CustomerCheckoutPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<CheckoutApiV1CustomerCheckoutPostError>, Options<CheckoutApiV1CustomerCheckoutPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.checkoutApiV1CustomerCheckoutPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const ordersApiV1CustomerOrdersGetQueryKey = (options?: Options<OrdersApiV1CustomerOrdersGetData>) => createQueryKey('ordersApiV1CustomerOrdersGet', options);

/**
 * Orders
 */
export const ordersApiV1CustomerOrdersGetOptions = (options?: Options<OrdersApiV1CustomerOrdersGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.ordersApiV1CustomerOrdersGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: ordersApiV1CustomerOrdersGetQueryKey(options)
    });
};

export const getOrderApiV1CustomerOrdersOrderIdGetQueryKey = (options: Options<GetOrderApiV1CustomerOrdersOrderIdGetData>) => createQueryKey('getOrderApiV1CustomerOrdersOrderIdGet', options);

/**
 * Get Order
 */
export const getOrderApiV1CustomerOrdersOrderIdGetOptions = (options: Options<GetOrderApiV1CustomerOrdersOrderIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.getOrderApiV1CustomerOrdersOrderIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrderApiV1CustomerOrdersOrderIdGetQueryKey(options)
    });
};

export const cancelOrderApiV1CustomerOrdersOrderIdCancelPostQueryKey = (options: Options<CancelOrderApiV1CustomerOrdersOrderIdCancelPostData>) => createQueryKey('cancelOrderApiV1CustomerOrdersOrderIdCancelPost', options);

/**
 * Cancel Order
 */
export const cancelOrderApiV1CustomerOrdersOrderIdCancelPostOptions = (options: Options<CancelOrderApiV1CustomerOrdersOrderIdCancelPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.cancelOrderApiV1CustomerOrdersOrderIdCancelPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: cancelOrderApiV1CustomerOrdersOrderIdCancelPostQueryKey(options)
    });
};

/**
 * Cancel Order
 */
export const cancelOrderApiV1CustomerOrdersOrderIdCancelPostMutation = (options?: Partial<Options<CancelOrderApiV1CustomerOrdersOrderIdCancelPostData>>): UseMutationOptions<unknown, AxiosError<CancelOrderApiV1CustomerOrdersOrderIdCancelPostError>, Options<CancelOrderApiV1CustomerOrdersOrderIdCancelPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<CancelOrderApiV1CustomerOrdersOrderIdCancelPostError>, Options<CancelOrderApiV1CustomerOrdersOrderIdCancelPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.cancelOrderApiV1CustomerOrdersOrderIdCancelPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const confirmOrderApiV1CustomerOrdersOrderIdPayPostQueryKey = (options: Options<ConfirmOrderApiV1CustomerOrdersOrderIdPayPostData>) => createQueryKey('confirmOrderApiV1CustomerOrdersOrderIdPayPost', options);

/**
 * Confirm Order
 */
export const confirmOrderApiV1CustomerOrdersOrderIdPayPostOptions = (options: Options<ConfirmOrderApiV1CustomerOrdersOrderIdPayPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.confirmOrderApiV1CustomerOrdersOrderIdPayPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: confirmOrderApiV1CustomerOrdersOrderIdPayPostQueryKey(options)
    });
};

/**
 * Confirm Order
 */
export const confirmOrderApiV1CustomerOrdersOrderIdPayPostMutation = (options?: Partial<Options<ConfirmOrderApiV1CustomerOrdersOrderIdPayPostData>>): UseMutationOptions<unknown, AxiosError<ConfirmOrderApiV1CustomerOrdersOrderIdPayPostError>, Options<ConfirmOrderApiV1CustomerOrdersOrderIdPayPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<ConfirmOrderApiV1CustomerOrdersOrderIdPayPostError>, Options<ConfirmOrderApiV1CustomerOrdersOrderIdPayPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.confirmOrderApiV1CustomerOrdersOrderIdPayPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const reviewOrderApiV1CustomerOrdersOrderIdReviewPostQueryKey = (options: Options<ReviewOrderApiV1CustomerOrdersOrderIdReviewPostData>) => createQueryKey('reviewOrderApiV1CustomerOrdersOrderIdReviewPost', options);

/**
 * Review Order
 */
export const reviewOrderApiV1CustomerOrdersOrderIdReviewPostOptions = (options: Options<ReviewOrderApiV1CustomerOrdersOrderIdReviewPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.reviewOrderApiV1CustomerOrdersOrderIdReviewPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: reviewOrderApiV1CustomerOrdersOrderIdReviewPostQueryKey(options)
    });
};

/**
 * Review Order
 */
export const reviewOrderApiV1CustomerOrdersOrderIdReviewPostMutation = (options?: Partial<Options<ReviewOrderApiV1CustomerOrdersOrderIdReviewPostData>>): UseMutationOptions<unknown, AxiosError<ReviewOrderApiV1CustomerOrdersOrderIdReviewPostError>, Options<ReviewOrderApiV1CustomerOrdersOrderIdReviewPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<ReviewOrderApiV1CustomerOrdersOrderIdReviewPostError>, Options<ReviewOrderApiV1CustomerOrdersOrderIdReviewPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.reviewOrderApiV1CustomerOrdersOrderIdReviewPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const farmerDashboardApiV1CustomerDashboardGetQueryKey = (options?: Options<FarmerDashboardApiV1CustomerDashboardGetData>) => createQueryKey('farmerDashboardApiV1CustomerDashboardGet', options);

/**
 * Farmer Dashboard
 */
export const farmerDashboardApiV1CustomerDashboardGetOptions = (options?: Options<FarmerDashboardApiV1CustomerDashboardGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.farmerDashboardApiV1CustomerDashboardGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: farmerDashboardApiV1CustomerDashboardGetQueryKey(options)
    });
};

export const getMeApiV1UsersMeGetQueryKey = (options?: Options<GetMeApiV1UsersMeGetData>) => createQueryKey('getMeApiV1UsersMeGet', options);

/**
 * Get Me
 */
export const getMeApiV1UsersMeGetOptions = (options?: Options<GetMeApiV1UsersMeGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.getMeApiV1UsersMeGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMeApiV1UsersMeGetQueryKey(options)
    });
};

/**
 * Update Profile
 */
export const updateProfileApiV1UsersMePatchMutation = (options?: Partial<Options<UpdateProfileApiV1UsersMePatchData>>): UseMutationOptions<UpdateProfileApiV1UsersMePatchResponse, AxiosError<UpdateProfileApiV1UsersMePatchError>, Options<UpdateProfileApiV1UsersMePatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateProfileApiV1UsersMePatchResponse, AxiosError<UpdateProfileApiV1UsersMePatchError>, Options<UpdateProfileApiV1UsersMePatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.updateProfileApiV1UsersMePatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Change Password
 */
export const changePasswordApiV1UsersMePasswordPatchMutation = (options?: Partial<Options<ChangePasswordApiV1UsersMePasswordPatchData>>): UseMutationOptions<unknown, AxiosError<ChangePasswordApiV1UsersMePasswordPatchError>, Options<ChangePasswordApiV1UsersMePasswordPatchData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<ChangePasswordApiV1UsersMePasswordPatchError>, Options<ChangePasswordApiV1UsersMePasswordPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.changePasswordApiV1UsersMePasswordPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createAddressApiV1UsersMeAddressPostQueryKey = (options: Options<CreateAddressApiV1UsersMeAddressPostData>) => createQueryKey('createAddressApiV1UsersMeAddressPost', options);

/**
 * Create Address
 */
export const createAddressApiV1UsersMeAddressPostOptions = (options: Options<CreateAddressApiV1UsersMeAddressPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.createAddressApiV1UsersMeAddressPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createAddressApiV1UsersMeAddressPostQueryKey(options)
    });
};

/**
 * Create Address
 */
export const createAddressApiV1UsersMeAddressPostMutation = (options?: Partial<Options<CreateAddressApiV1UsersMeAddressPostData>>): UseMutationOptions<CreateAddressApiV1UsersMeAddressPostResponse, AxiosError<CreateAddressApiV1UsersMeAddressPostError>, Options<CreateAddressApiV1UsersMeAddressPostData>> => {
    const mutationOptions: UseMutationOptions<CreateAddressApiV1UsersMeAddressPostResponse, AxiosError<CreateAddressApiV1UsersMeAddressPostError>, Options<CreateAddressApiV1UsersMeAddressPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.createAddressApiV1UsersMeAddressPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Address
 */
export const deleteAddressApiV1UsersMeAddressAddressIdDeleteMutation = (options?: Partial<Options<DeleteAddressApiV1UsersMeAddressAddressIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteAddressApiV1UsersMeAddressAddressIdDeleteError>, Options<DeleteAddressApiV1UsersMeAddressAddressIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteAddressApiV1UsersMeAddressAddressIdDeleteError>, Options<DeleteAddressApiV1UsersMeAddressAddressIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.deleteAddressApiV1UsersMeAddressAddressIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update Address
 */
export const updateAddressApiV1UsersMeAddressAddressIdPatchMutation = (options?: Partial<Options<UpdateAddressApiV1UsersMeAddressAddressIdPatchData>>): UseMutationOptions<UpdateAddressApiV1UsersMeAddressAddressIdPatchResponse, AxiosError<UpdateAddressApiV1UsersMeAddressAddressIdPatchError>, Options<UpdateAddressApiV1UsersMeAddressAddressIdPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateAddressApiV1UsersMeAddressAddressIdPatchResponse, AxiosError<UpdateAddressApiV1UsersMeAddressAddressIdPatchError>, Options<UpdateAddressApiV1UsersMeAddressAddressIdPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.updateAddressApiV1UsersMeAddressAddressIdPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addAvatarApiV1UsersMeAvatarPostQueryKey = (options: Options<AddAvatarApiV1UsersMeAvatarPostData>) => createQueryKey('addAvatarApiV1UsersMeAvatarPost', options);

/**
 * Add Avatar
 */
export const addAvatarApiV1UsersMeAvatarPostOptions = (options: Options<AddAvatarApiV1UsersMeAvatarPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.addAvatarApiV1UsersMeAvatarPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addAvatarApiV1UsersMeAvatarPostQueryKey(options)
    });
};

/**
 * Add Avatar
 */
export const addAvatarApiV1UsersMeAvatarPostMutation = (options?: Partial<Options<AddAvatarApiV1UsersMeAvatarPostData>>): UseMutationOptions<unknown, AxiosError<AddAvatarApiV1UsersMeAvatarPostError>, Options<AddAvatarApiV1UsersMeAvatarPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<AddAvatarApiV1UsersMeAvatarPostError>, Options<AddAvatarApiV1UsersMeAvatarPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.addAvatarApiV1UsersMeAvatarPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProductsApiV1ProductsGetQueryKey = (options?: Options<GetProductsApiV1ProductsGetData>) => createQueryKey('getProductsApiV1ProductsGet', options);

/**
 * Get Products
 */
export const getProductsApiV1ProductsGetOptions = (options?: Options<GetProductsApiV1ProductsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.getProductsApiV1ProductsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProductsApiV1ProductsGetQueryKey(options)
    });
};

export const sendNotificationApiV1SendNotificationPostQueryKey = (options: Options<SendNotificationApiV1SendNotificationPostData>) => createQueryKey('sendNotificationApiV1SendNotificationPost', options);

/**
 * Send Notification
 */
export const sendNotificationApiV1SendNotificationPostOptions = (options: Options<SendNotificationApiV1SendNotificationPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.sendNotificationApiV1SendNotificationPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: sendNotificationApiV1SendNotificationPostQueryKey(options)
    });
};

/**
 * Send Notification
 */
export const sendNotificationApiV1SendNotificationPostMutation = (options?: Partial<Options<SendNotificationApiV1SendNotificationPostData>>): UseMutationOptions<unknown, AxiosError<SendNotificationApiV1SendNotificationPostError>, Options<SendNotificationApiV1SendNotificationPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<SendNotificationApiV1SendNotificationPostError>, Options<SendNotificationApiV1SendNotificationPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await Default.sendNotificationApiV1SendNotificationPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1ApiV1GetQueryKey = (options?: Options<V1ApiV1GetData>) => createQueryKey('v1ApiV1Get', options);

/**
 * V1
 */
export const v1ApiV1GetOptions = (options?: Options<V1ApiV1GetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.v1ApiV1Get({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1ApiV1GetQueryKey(options)
    });
};

export const readRootGetQueryKey = (options?: Options<ReadRootGetData>) => createQueryKey('readRootGet', options);

/**
 * Read Root
 */
export const readRootGetOptions = (options?: Options<ReadRootGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await Default.readRootGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readRootGetQueryKey(options)
    });
};