// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * AddToCartRequest
 */
export const zAddToCartRequest = z.object({
    product_id: z.string(),
    quantity: z.int().gt(0)
});

/**
 * AddressIn
 */
export const zAddressIn = z.object({
    street: z.string(),
    street2: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    barangay: z.string(),
    city: z.string().max(50),
    region: z.string().max(50),
    postal_code: z.string().max(20).regex(/^\d{4,5}(-\d{4})?$/),
    user: z.optional(z.union([
        z.unknown(),
        z.null()
    ])),
    is_primary: z.boolean()
});

/**
 * AddressUpdate
 */
export const zAddressUpdate = z.object({
    street: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    street2: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    barangay: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    city: z.optional(z.union([
        z.string().max(50),
        z.null()
    ])),
    region: z.optional(z.union([
        z.string().max(50),
        z.null()
    ])),
    postal_code: z.optional(z.union([
        z.string().max(20),
        z.null()
    ])),
    is_primary: z.optional(z.union([
        z.boolean(),
        z.null()
    ]))
});

/**
 * Body_add_avatar_api_v1_users_me_avatar_post
 */
export const zBodyAddAvatarApiV1UsersMeAvatarPost = z.object({
    file: z.string()
});

/**
 * Body_create_product_api_v1_farmer_product_post
 */
export const zBodyCreateProductApiV1FarmerProductPost = z.object({
    name: z.string(),
    description: z.string(),
    unit: z.string(),
    price_per_unit: z.number(),
    stock_quantity: z.int(),
    status: z.string(),
    visibility: z.string(),
    images: z.optional(z.array(z.string()))
});

/**
 * Body_upload_product_image_api_v1_farmer_product__product_id__images_post
 */
export const zBodyUploadProductImageApiV1FarmerProductProductIdImagesPost = z.object({
    file: z.string()
});

/**
 * OrderStatus
 */
export const zOrderStatus = z.enum([
    'pending',
    'processing',
    'paid',
    'shipped',
    'delivered',
    'cancelled',
    'failed',
    'refunded'
]);

/**
 * Role
 */
export const zRole = z.enum([
    'farmer',
    'customer'
]);

/**
 * Address
 * Represents a Address record
 */
export const zPrismaModelsAddress = z.object({
    id: z.int(),
    user_id: z.string(),
    street: z.string(),
    street2: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    barangay: z.string(),
    city: z.string(),
    region: z.string(),
    postal_code: z.string(),
    is_primary: z.boolean(),
    user: z.optional(z.union([
        zPrismaModelsUser,
        z.null()
    ]))
});

/**
 * ProductStatus
 */
export const zProductStatus = z.enum([
    'draft',
    'active',
    'archived',
    'sold'
]);

/**
 * ProductVisibility
 */
export const zProductVisibility = z.enum([
    'public',
    'private'
]);

/**
 * ProductCategory
 * Represents a ProductCategory record
 */
export const zProductCategory = z.object({
    id: z.int(),
    name: z.string(),
    products: z.optional(z.union([
        z.array(zPrismaModelsProduct),
        z.null()
    ]))
});

/**
 * ProductImage
 * Represents a ProductImage record
 */
export const zProductImage = z.object({
    id: z.string(),
    product_id: z.string(),
    image_public_url: z.string(),
    uploaded_at: z.iso.datetime(),
    product: z.optional(z.union([
        zPrismaModelsProduct,
        z.null()
    ]))
});

/**
 * Review
 * Represents a Review record
 */
export const zReview = z.object({
    id: z.int(),
    customer_id: z.string(),
    product_id: z.string(),
    rating: z.int(),
    comment: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    created_at: z.iso.datetime(),
    customer: z.optional(z.union([
        zPrismaModelsUser,
        z.null()
    ])),
    product: z.optional(z.union([
        zPrismaModelsProduct,
        z.null()
    ]))
});

/**
 * Cart
 * Represents a Cart record
 */
export const zPrismaModelsCart = z.object({
    id: z.string(),
    customer_id: z.string(),
    created_at: z.iso.datetime(),
    updated_at: z.iso.datetime(),
    is_active: z.boolean(),
    customer: z.optional(z.union([
        zPrismaModelsUser,
        z.null()
    ])),
    cart_items: z.optional(z.union([
        z.array(zPrismaModelsCartItem),
        z.null()
    ]))
});

/**
 * CartItem
 * Represents a CartItem record
 */
export const zPrismaModelsCartItem = z.object({
    id: z.string(),
    cart_id: z.string(),
    product_id: z.string(),
    quantity: z.int(),
    added_at: z.iso.datetime(),
    cart: z.optional(z.union([
        zPrismaModelsCart,
        z.null()
    ])),
    product: z.optional(z.union([
        zPrismaModelsProduct,
        z.null()
    ]))
});

/**
 * FarmerOrderStatus
 */
export const zFarmerOrderStatus = z.enum([
    'pending',
    'accepted',
    'rejected',
    'preparing',
    'ready_to_ship',
    'shipped',
    'delivered',
    'cancelled'
]);

/**
 * FarmerOrder
 * Represents a FarmerOrder record
 */
export const zFarmerOrder = z.object({
    id: z.int(),
    customer_order_id: z.string(),
    farmer_id: z.string(),
    status: zFarmerOrderStatus,
    subtotal: z.string(),
    created_at: z.iso.datetime(),
    order: z.optional(z.union([
        zCustomerOrder,
        z.null()
    ])),
    farmer: z.optional(z.union([
        zPrismaModelsUser,
        z.null()
    ])),
    order_item: z.optional(z.union([
        z.array(zOrderItem),
        z.null()
    ]))
});

/**
 * OrderItem
 * Represents a OrderItem record
 */
export const zOrderItem = z.object({
    id: z.int(),
    customer_order_id: z.string(),
    farmer_order_id: z.int(),
    product_id: z.string(),
    quantity: z.int(),
    price: z.string(),
    order: z.optional(z.union([
        zCustomerOrder,
        z.null()
    ])),
    product: z.optional(z.union([
        zPrismaModelsProduct,
        z.null()
    ])),
    order_farm: z.optional(z.union([
        zFarmerOrder,
        z.null()
    ]))
});

/**
 * Product
 * Represents a Product record
 */
export const zPrismaModelsProduct = z.object({
    id: z.string(),
    user_id: z.string(),
    name: z.string(),
    description: z.string(),
    category_id: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    unit: z.string(),
    status: zProductStatus,
    visibility: zProductVisibility,
    price_per_unit: z.string(),
    stock_quantity: z.int(),
    updated_at: z.iso.datetime(),
    created_at: z.iso.datetime(),
    user: z.optional(z.union([
        zPrismaModelsUser,
        z.null()
    ])),
    category: z.optional(z.union([
        zProductCategory,
        z.null()
    ])),
    images: z.optional(z.union([
        z.array(zProductImage),
        z.null()
    ])),
    reviews: z.optional(z.union([
        z.array(zReview),
        z.null()
    ])),
    cart_items: z.optional(z.union([
        z.array(zPrismaModelsCartItem),
        z.null()
    ])),
    order_item: z.optional(z.union([
        z.array(zOrderItem),
        z.null()
    ]))
});

/**
 * User
 * Represents a User record
 */
export const zPrismaModelsUser = z.object({
    id: z.string(),
    first_name: z.string(),
    middle_name: z.string(),
    last_name: z.string(),
    suffix: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    profile_image_url: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    email: z.string(),
    password: z.string(),
    phone_number: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    gender: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    role: zRole,
    birthday: z.iso.datetime(),
    created_at: z.iso.datetime(),
    addresses: z.optional(z.union([
        z.array(zPrismaModelsAddress),
        z.null()
    ])),
    products: z.optional(z.union([
        z.array(zPrismaModelsProduct),
        z.null()
    ])),
    reviews: z.optional(z.union([
        z.array(zReview),
        z.null()
    ])),
    cart: z.optional(z.union([
        z.array(zPrismaModelsCart),
        z.null()
    ])),
    Order: z.optional(z.union([
        z.array(zCustomerOrder),
        z.null()
    ])),
    OrderFarm: z.optional(z.union([
        z.array(zFarmerOrder),
        z.null()
    ]))
});

/**
 * CustomerOrder
 * Represents a CustomerOrder record
 */
export const zCustomerOrder = z.object({
    id: z.string(),
    customer_id: z.string(),
    total_price: z.string(),
    status: zOrderStatus,
    updated_at: z.iso.datetime(),
    created_at: z.iso.datetime(),
    customer: z.optional(z.union([
        zPrismaModelsUser,
        z.null()
    ])),
    farmer_order: z.optional(z.union([
        z.array(zFarmerOrder),
        z.null()
    ])),
    order_item: z.optional(z.union([
        z.array(zOrderItem),
        z.null()
    ]))
});

/**
 * ValidationError
 */
export const zValidationError = z.object({
    loc: z.array(z.union([
        z.string(),
        z.int()
    ])),
    msg: z.string(),
    type: z.string()
});

/**
 * HTTPValidationError
 */
export const zHttpValidationError = z.object({
    detail: z.optional(z.array(zValidationError))
});

/**
 * LoginSchema
 */
export const zLoginSchema = z.object({
    email: z.email(),
    password: z.string()
});

/**
 * NotificationType
 */
export const zNotificationType = z.enum([
    'order_placed',
    'product_updated',
    'payment_received',
    'low_stock',
    'order_cancelled',
    'message_received',
    'bulk_order_placed'
]);

/**
 * NotificationPayload
 */
export const zNotificationPayload = z.object({
    user_id: z.string(),
    actor_id: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    actor_name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    title: z.string(),
    message: z.string(),
    type: zNotificationType,
    data: z.optional(z.union([
        z.record(z.string(), z.unknown()),
        z.null()
    ]))
});

/**
 * OrderStatusUpdate
 */
export const zOrderStatusUpdate = z.object({
    status: z.string()
});

/**
 * PasswordChangeRequest
 */
export const zPasswordChangeRequest = z.object({
    current_password: z.string().min(6),
    new_password: z.string().min(6)
});

/**
 * Visibility
 */
export const zVisibility = z.enum([
    'public',
    'private',
    'admin_only'
]);

/**
 * ProductUpdate
 */
export const zProductUpdate = z.object({
    name: z.optional(z.union([
        z.string().max(100),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    category_id: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    unit: z.optional(z.union([
        z.string().max(20),
        z.null()
    ])),
    price_per_unit: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    stock_quantity: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    status: z.optional(z.union([
        zProductStatus,
        z.null()
    ])),
    visibility: z.optional(z.union([
        zVisibility,
        z.null()
    ]))
});

/**
 * UpdateQuantityRequest
 */
export const zUpdateQuantityRequest = z.object({
    quantity: z.int().gt(0)
});

/**
 * UserCreate
 */
export const zUserCreate = z.object({
    first_name: z.string().max(100),
    middle_name: z.optional(z.union([
        z.string().max(100),
        z.null()
    ])),
    last_name: z.string().max(100),
    suffix: z.optional(z.union([
        z.string().max(100),
        z.null()
    ])),
    profile_image_url: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    email: z.email(),
    password: z.string().min(6),
    phone_number: z.string(),
    gender: z.optional(z.union([
        z.string().max(50),
        z.null()
    ])),
    birthday: z.iso.date(),
    role: z.enum([
        'farmer',
        'customer'
    ])
});

/**
 * UserUpdate
 */
export const zUserUpdate = z.object({
    first_name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    middle_name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    last_name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    suffix: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    profile_image_url: z.optional(z.union([
        z.url().min(1).max(2083),
        z.null()
    ])),
    email: z.optional(z.union([
        z.email(),
        z.null()
    ])),
    phone_number: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    gender: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    birthday: z.optional(z.union([
        z.iso.date(),
        z.null()
    ]))
});

/**
 * Address
 */
export const zSrcModelsAddressAddress = z.object({
    street: z.string(),
    street2: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    barangay: z.string(),
    city: z.string().max(50),
    region: z.string().max(50),
    postal_code: z.string().max(20).regex(/^\d{4,5}(-\d{4})?$/),
    user: z.optional(z.union([
        z.unknown(),
        z.null()
    ])),
    is_primary: z.boolean(),
    id: z.int(),
    user_id: z.string()
});

/**
 * User
 */
export const zSrcModelsUserUser = z.object({
    first_name: z.string().max(100),
    middle_name: z.optional(z.union([
        z.string().max(100),
        z.null()
    ])),
    last_name: z.string().max(100),
    suffix: z.optional(z.union([
        z.string().max(100),
        z.null()
    ])),
    profile_image_url: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    email: z.email(),
    password: z.string().min(6),
    phone_number: z.string(),
    gender: z.optional(z.union([
        z.string().max(50),
        z.null()
    ])),
    birthday: z.iso.date(),
    role: z.enum([
        'farmer',
        'customer'
    ]),
    id: z.string(),
    created_at: z.iso.datetime(),
    addresses: z.optional(z.union([
        z.array(zSrcModelsAddressAddress),
        z.null()
    ]))
});

/**
 * CartItem
 */
export const zSrcModelsCartCartItem = z.object({
    cart_id: z.string(),
    quantity: z.int(),
    product_id: z.string(),
    product: z.optional(z.union([
        z.unknown(),
        z.null()
    ])),
    id: z.string(),
    added_at: z.iso.datetime()
});

/**
 * Cart
 */
export const zSrcModelsCartCart = z.object({
    is_active: z.boolean(),
    id: z.string(),
    customer_id: z.string(),
    created_at: z.iso.datetime(),
    updated_at: z.iso.datetime(),
    customer: z.optional(z.union([
        zSrcModelsUserUser,
        z.null()
    ])),
    cart_items: z.optional(z.array(zSrcModelsCartCartItem)).default([])
});

/**
 * Product
 */
export const zSrcModelsProductProduct = z.object({
    name: z.string().max(99),
    description: z.string(),
    category_id: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    unit: z.string().max(19),
    price_per_unit: z.number(),
    stock_quantity: z.int(),
    status: z.optional(zProductStatus),
    visibility: z.optional(zVisibility),
    user: z.optional(z.union([
        z.unknown(),
        z.null()
    ])),
    images: z.optional(z.union([
        z.array(z.unknown()),
        z.null()
    ])),
    reviews: z.optional(z.union([
        z.array(z.unknown()),
        z.null()
    ])),
    id: z.string(),
    user_id: z.string(),
    updated_at: z.iso.datetime(),
    created_at: z.iso.datetime()
});

export const zFacebookLoginApiV1AuthFacebookGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zFacebookCallbackApiV1AuthFacebookCallbackGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zGoogleLoginApiV1AuthGoogleGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        role: z.optional(z.string()).default('customer')
    }))
});

export const zGoogleCallbackApiV1AuthGoogleCallbackGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zRegisterApiV1AuthRegisterPostData = z.object({
    body: zUserCreate,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zLoginApiV1AuthLoginPostData = z.object({
    body: zLoginSchema,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zRefreshTokenApiV1AuthRefreshPostData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zMyProductsApiV1FarmerProductsGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        name: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        status: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        visibility: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        min_price: z.optional(z.union([
            z.number(),
            z.null()
        ])),
        max_price: z.optional(z.union([
            z.number(),
            z.null()
        ])),
        skip: z.optional(z.int().gte(0)).default(0),
        take: z.optional(z.int().gte(1)).default(10),
        order_by: z.optional(z.string()).default('created_at'),
        order: z.optional(z.string()).default('desc')
    }))
});

/**
 * Response My Products Api V1 Farmer Products Get
 * Successful Response
 */
export const zMyProductsApiV1FarmerProductsGetResponse = z.array(zSrcModelsProductProduct);

export const zDeleteProductApiV1FarmerProductProductIdDeleteData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        product_id: z.string()
    }),
    query: z.optional(z.never())
});

export const zViewProductApiV1FarmerProductProductIdGetData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        product_id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zViewProductApiV1FarmerProductProductIdGetResponse = zSrcModelsProductProduct;

export const zUpdateProductApiV1FarmerProductProductIdPatchData = z.object({
    body: zProductUpdate,
    path: z.object({
        product_id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUpdateProductApiV1FarmerProductProductIdPatchResponse = zSrcModelsProductProduct;

export const zCreateProductApiV1FarmerProductPostData = z.object({
    body: zBodyCreateProductApiV1FarmerProductPost,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zCreateProductApiV1FarmerProductPostResponse = zSrcModelsProductProduct;

export const zUploadProductImageApiV1FarmerProductProductIdImagesPostData = z.object({
    body: zBodyUploadProductImageApiV1FarmerProductProductIdImagesPost,
    path: z.object({
        product_id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUploadProductImageApiV1FarmerProductProductIdImagesPostResponse = zSrcModelsProductProduct;

export const zDeleteProductImageApiV1FarmerProductProductIdImagesImageIdDeleteData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        product_id: z.string(),
        image_id: z.string()
    }),
    query: z.optional(z.never())
});

export const zUpdateProductStatusApiV1FarmerProductProductIdStatusPatchData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zOrdersApiV1FarmerOrdersGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        skip: z.optional(z.int().gte(0)).default(0),
        limit: z.optional(z.int().gte(1)).default(10),
        status: z.optional(z.union([
            z.string(),
            z.null()
        ]))
    }))
});

export const zAcceptOrderApiV1FarmerOrdersOrderIdAcceptPostData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        order_id: z.int()
    }),
    query: z.optional(z.never())
});

export const zUpdateProductStatusApiV1FarmerOrdersOrderIdStatusPatchData = z.object({
    body: zOrderStatusUpdate,
    path: z.object({
        order_id: z.int()
    }),
    query: z.optional(z.never())
});

export const zFarmerDashboardApiV1FarmerDashboardGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAddToCartApiV1CustomerAddToCartPostData = z.object({
    body: zAddToCartRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zAddToCartApiV1CustomerAddToCartPostResponse = zSrcModelsCartCart;

export const zUpdateCartItemQuantityApiV1CustomerCartItemsItemIdQuantityPatchData = z.object({
    body: zUpdateQuantityRequest,
    path: z.object({
        item_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zDeleteCartItemApiV1CustomerCartItemsItemIdDeleteDeleteData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        item_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zGetCartApiV1CustomerCartGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCheckoutApiV1CustomerCheckoutPostData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zOrdersApiV1CustomerOrdersGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        skip: z.optional(z.int().gte(0)).default(0),
        limit: z.optional(z.int().gte(1)).default(10)
    }))
});

export const zGetOrderApiV1CustomerOrdersOrderIdGetData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        order_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zCancelOrderApiV1CustomerOrdersOrderIdCancelPostData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        order_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zConfirmOrderApiV1CustomerOrdersOrderIdPayPostData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        order_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zReviewOrderApiV1CustomerOrdersOrderIdReviewPostData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        order_id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zFarmerDashboardApiV1CustomerDashboardGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zGetMeApiV1UsersMeGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zGetMeApiV1UsersMeGetResponse = zPrismaModelsUser;

export const zUpdateProfileApiV1UsersMePatchData = z.object({
    body: zUserUpdate,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUpdateProfileApiV1UsersMePatchResponse = zPrismaModelsUser;

export const zChangePasswordApiV1UsersMePasswordPatchData = z.object({
    body: zPasswordChangeRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCreateAddressApiV1UsersMeAddressPostData = z.object({
    body: zAddressIn,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zCreateAddressApiV1UsersMeAddressPostResponse = zSrcModelsAddressAddress;

export const zDeleteAddressApiV1UsersMeAddressAddressIdDeleteData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        address_id: z.int()
    }),
    query: z.optional(z.never())
});

export const zUpdateAddressApiV1UsersMeAddressAddressIdPatchData = z.object({
    body: zAddressUpdate,
    path: z.object({
        address_id: z.int()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zUpdateAddressApiV1UsersMeAddressAddressIdPatchResponse = zSrcModelsAddressAddress;

export const zAddAvatarApiV1UsersMeAvatarPostData = z.object({
    body: zBodyAddAvatarApiV1UsersMeAvatarPost,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zGetProductsApiV1ProductsGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        skip: z.optional(z.int().gte(0)).default(0),
        take: z.optional(z.int().gte(1)).default(10),
        search: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        min_price: z.optional(z.union([
            z.number(),
            z.null()
        ])),
        max_price: z.optional(z.union([
            z.number(),
            z.null()
        ])),
        order_by: z.optional(z.string()).default('created_at'),
        order: z.optional(z.string()).default('desc')
    }))
});

export const zSendNotificationApiV1SendNotificationPostData = z.object({
    body: zNotificationPayload,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zV1ApiV1GetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zReadRootGetData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});