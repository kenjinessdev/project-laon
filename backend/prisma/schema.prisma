generator client {
  provider                    = "prisma-client-py"
  interface                   = "asyncio"
  enable_experimental_decimal = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== User Models ====================
model User {
  id                String          @id @default(uuid()) @db.Uuid
  first_name        String          @db.VarChar(100)
  middle_name       String          @db.VarChar(100)
  last_name         String          @db.VarChar(100)
  suffix            String?         @db.VarChar(100)
  profile_image_url String?         @db.Text
  email             String          @unique @db.VarChar(100)
  password          String          @db.VarChar(128)
  phone_number      String?         @unique @db.VarChar(50)
  gender            String?         @db.VarChar(50)
  role              Role
  birthday          DateTime
  created_at        DateTime        @default(now())
  addresses         Address[]
  products          Product[]
  reviews           Review[]
  cart              Cart[]
  Order             CustomerOrder[]
  OrderFarm         FarmerOrder[]

  @@map("users")
}

enum Role {
  farmer
  customer
}

model Address {
  id          Int     @id @default(autoincrement())
  user_id     String  @db.Uuid
  street      String  @db.Text
  street2     String? @db.Text // âœ… Make optional if it's not always used
  barangay    String  @db.Text
  city        String  @db.VarChar(50)
  region      String  @db.VarChar(50)
  postal_code String  @db.VarChar(20)
  is_primary  Boolean

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// ==================== Product Models ====================
enum ProductStatus {
  draft
  active
  archived
  sold
}

enum ProductVisibility {
  public
  private
}

model Product {
  id             String            @id @default(uuid()) @db.Uuid
  user_id        String            @db.Uuid
  name           String            @db.VarChar(100)
  description    String            @db.Text
  category_id    Int?              @db.Integer
  unit           String            @db.VarChar(20)
  status         ProductStatus     @default(active) // Enum preferred if available
  visibility     ProductVisibility @default(public)
  price_per_unit Decimal
  stock_quantity Int               @db.Integer
  updated_at     DateTime          @updatedAt
  created_at     DateTime          @default(now())

  user     User             @relation(fields: [user_id], references: [id])
  category ProductCategory? @relation(fields: [category_id], references: [id])

  images     ProductImage[]
  reviews    Review[]
  cart_items CartItem[]
  OrderItem  OrderItem[]

  @@map("products")
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(100)
  products Product[]

  @@map("product_categories")
}

model ProductImage {
  id               String   @id @default(uuid()) @db.Uuid
  product_id       String   @db.Uuid
  image_public_url String   @db.Text
  uploaded_at      DateTime @default(now())

  product Product @relation(fields: [product_id], references: [id])

  @@map("product_images")
}

model Review {
  id          Int      @id @default(autoincrement())
  customer_id String   @db.Uuid
  product_id  String   @db.Uuid
  rating      Int      @db.Integer
  comment     String?  @db.Text
  created_at  DateTime @default(now())

  customer User    @relation(fields: [customer_id], references: [id])
  product  Product @relation(fields: [product_id], references: [id])

  @@map("reviews")
}

// ==================== Product Models ====================
model Cart {
  id          String   @id @default(uuid()) @db.Uuid
  customer_id String   @db.Uuid
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  is_active   Boolean

  customer   User       @relation(fields: [customer_id], references: [id])
  cart_items CartItem[]

  @@map("cart")
}

model CartItem {
  id         String   @id @default(uuid()) @db.Uuid
  cart_id    String   @db.Uuid
  product_id String   @db.Uuid
  quantity   Int      @db.Integer
  added_at   DateTime @default(now())

  cart    Cart    @relation(fields: [cart_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("cart_items")
}

// ==================== Order Models ====================
model CustomerOrder {
  id                  String      @id @default(uuid()) @db.Uuid
  customer_order_code String      @unique
  customer_id         String      @db.Uuid
  total_price         Decimal
  status              OrderStatus
  updated_at          DateTime    @updatedAt
  created_at          DateTime    @default(now())

  customer     User          @relation(fields: [customer_id], references: [id])
  farmer_order FarmerOrder[]
  order_item   OrderItem[]

  @@map("customer_orders")
}

enum OrderStatus {
  pending
  paid
  shipped
  delivered
  cancelled
}

model FarmerOrder {
  id                Int               @id @default(autoincrement())
  customer_order_id String            @db.Uuid
  farmer_id         String            @db.Uuid
  status            FarmerOrderStatus
  subtotal          Decimal
  created_at        DateTime          @default(now())

  order     CustomerOrder @relation(fields: [customer_order_id], references: [id])
  farmer    User          @relation(fields: [farmer_id], references: [id])
  OrderItem OrderItem[]

  @@map("farmer_orders")
}

enum FarmerOrderStatus {
  pending // Order placed, farmer hasn't acted yet
  accepted // Farmer confirmed the order
  rejected // Farmer rejected their part of the order
  preparing // Farmer is preparing the items
  ready_to_ship // Items are ready for delivery/pickup
  shipped // Items have been shipped
  delivered // Items have been delivered to the customer
  cancelled // Order canceled (by farmer or system)
}

model OrderItem {
  id                Int     @id @default(autoincrement())
  customer_order_id String  @db.Uuid
  farmer_order_id   Int
  product_id        String  @db.Uuid
  quantity          Int
  price             Decimal

  order     CustomerOrder @relation(fields: [customer_order_id], references: [id])
  product   Product       @relation(fields: [product_id], references: [id])
  orderFarm FarmerOrder   @relation(fields: [farmer_order_id], references: [id])

  @@map("order_items")
}
